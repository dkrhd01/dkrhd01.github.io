---
title: Blog Post Generator
description: 주제를 입력하면 최신 정보를 검색하여 블로그 포스트를 자동 생성합니다
globs: ["pages/*.md"]
---

# 블로그 포스트 자동 생성 규칙

이 규칙은 사용자가 주제를 입력하면 최신 정보를 웹에서 검색하고, `pages/` 폴더의 형식에 맞춰 마크다운 블로그 포스트를 자동 생성합니다.

## 트리거 조건

사용자가 다음과 같은 요청을 할 때 이 규칙이 활성화됩니다:

- "블로그 작성해줘: [주제]"
- "[주제]에 대한 블로그 포스트 만들어줘"
- "블로그 글 생성: [주제]"

## 작성 프로세스

### 1단계: 최신 정보 검색

- **필수**: 주제에 대한 최신 정보를 웹 검색 도구(`web_search` 또는 `mcp_tavily_tavily_search`)를 사용하여 수집
- 검색 쿼리 예시:
  - "[주제] 최신 트렌드 2025"
  - "[주제] best practices"
  - "[주제] tutorial guide"
- 최소 3-5개의 신뢰할 수 있는 출처에서 정보 수집

### 2단계: Front Matter 생성

다음 형식을 **반드시** 따라야 합니다:

```yaml
---
title: "명확하고 매력적인 제목"
date: YYYY-MM-DD (오늘 날짜)
tags: ["태그1", "태그2", "태그3"] # 3-5개 추천
category: "적절한 카테고리"
description: "50-150자의 간결한 설명"
---
```

**카테고리 가이드라인**:

- Development (개발 관련)
- Tutorial (튜토리얼/가이드)
- Technology (기술 트렌드)
- DevOps (배포/인프라)
- Design (디자인/UI/UX)
- Career (커리어/성장)
- Review (리뷰/분석)

### 3단계: 본문 작성

#### 구조 요구사항

1. **도입부** (# 제목)

   - 주제 소개
   - 왜 중요한지 설명
   - 독자가 얻을 수 있는 것

2. **주요 내용** (## 섹션들)

   - 최소 3-5개의 주요 섹션
   - 각 섹션은 명확한 소제목 사용
   - 논리적 흐름 유지

3. **실용적 예제**

   - 코드 블록 포함 (관련 시)
   - 실제 사용 사례
   - 단계별 가이드

4. **시각적 요소**

   - 리스트 (-, 1. 등)
   - 표 (비교/정리 시)
   - 인용구 (> 중요한 개념)
   - 이모지 (적절히 사용)

5. **마무리**
   - 핵심 요약
   - 다음 단계 제안
   - 추가 리소스 링크

#### 스타일 가이드라인

- **톤**: 친근하고 전문적
- **길이**: 최소 800-1500단어 (한글 기준 1000-2000자)
- **가독성**:
  - 짧은 문단 (3-5줄)
  - 명확한 소제목
  - 적절한 공백
- **언어**: 한국어 (기술 용어는 영어 병기 가능)

#### 코드 블록 규칙

```언어
// 명확한 주석 포함
// 실행 가능한 예제
// 들여쓰기 일관성 유지
```

지원 언어: javascript, python, typescript, css, bash, json, yaml, java, go, rust

### 4단계: 파일 생성

- 파일명: `pages/주제-키워드.md` (영문, 소문자, 하이픈 구분)
- 예시: `pages/react-hooks-guide.md`, `pages/docker-deployment.md`
- **중요**: 기존 파일과 중복되지 않도록 확인

### 5단계: posts.json 업데이트 알림

파일 생성 후 사용자에게 다음을 안내:

```bash
# posts.json 업데이트 (로컬 테스트용)
node .github/scripts/generate-posts.js

# Git 커밋 및 푸시
git add pages/[파일명].md
git commit -m "feat: [주제] 블로그 포스트 추가"
git push origin main
```

## 품질 체크리스트

생성 전 다음을 확인:

- [ ] 웹 검색으로 최신 정보 수집 완료
- [ ] Front Matter 형식 정확
- [ ] 제목이 명확하고 SEO 친화적
- [ ] 최소 3개 이상의 주요 섹션
- [ ] 코드 예제 포함 (해당 시)
- [ ] 실용적인 팁/가이드 포함
- [ ] 마무리 섹션 포함
- [ ] 맞춤법 및 문법 검토
- [ ] 파일명이 영문 소문자 + 하이픈

## 예시 요청 처리

**사용자**: "블로그 작성해줘: Next.js 15 새로운 기능"

**처리 과정**:

1. 웹 검색: "Next.js 15 new features 2025", "Next.js 15 release notes"
2. 최신 정보 수집 및 분석
3. Front Matter 생성:

```yaml
---
title: "Next.js 15의 새로운 기능과 마이그레이션 가이드"
date: 2025-01-29
tags: ["Next.js", "React", "Web Development", "Frontend"]
category: "Development"
description: "Next.js 15에서 추가된 주요 기능과 업그레이드 방법을 알아봅니다."
---
```

4. 본문 작성 (도입, 주요 기능, 코드 예제, 마이그레이션 가이드, 마무리)
5. 파일 생성: `pages/nextjs-15-new-features.md`

## 주의사항

- **항상** 웹 검색을 먼저 수행하여 최신 정보 확인
- 검색 결과가 부족하면 추가 검색 수행
- 정보의 정확성과 출처 신뢰성 확인
- 코드 예제는 실행 가능하고 최신 버전 기준
- 저작권이 있는 내용은 재작성 또는 출처 명시
- 기술적으로 정확하고 검증된 정보만 포함

## 사용자 피드백 반영

사용자가 수정 요청 시:

- "더 자세히", "예제 추가", "섹션 추가" 등의 요청에 즉시 대응
- 기존 파일을 `search_replace` 도구로 수정
- 추가 웹 검색이 필요하면 수행
